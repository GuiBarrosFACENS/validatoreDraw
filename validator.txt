import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.stereotype.Component;

@Component
@AllArgsConstructor
@Slf4j
@KafkaListener(topics = "invoice-payment-plard", groupId = "SEU_GRUPO")
public class KafkaProvider implements SendMessageUseCase {

  private final InvoicePaymentYkProperties invoicePaymentYkProperties;
  private final KafkaTemplate<String, String> kafkaTemplate;
  private final InvoicePaymentPlardMapper invoicePaymentPlardMapper;
  private final ObjectMapper objectMapper;
  private final ExtractorAdvice extractor;
  private final FibonacciBackoffPolicyRetry fibonacciBackoffPolicyRetry;

  @Override
  public void sendMessage(BilledInvoicePlard billedInvoicePlard) {
    BilledInvoicePlardDTO billedInvoicePlardDTO =
            invoicePaymentPlardMapper.toDto(billedInvoicePlard);
    try {
      log.info("Sending notification for invoice {}", billedInvoicePlard);

      String messageBody = objectMapper.writeValueAsString(billedInvoicePlardDTO);
      ProducerRecord<String, String> producerRecord =
              new ProducerRecord<>(invoicePaymentYkProperties.getPlardTopic(), messageBody);

      log.info("Sending message to Kafka: {}", messageBody);
      sendMessageWithRetry(producerRecord);

    } catch (Exception e) {
      log.error("Error sending message to Kafka", e);
      throw new ErrorSendTopicKafkaException(
              billedInvoicePlardDTO.getInvoiceInfo().getExternalReference(), e);
    }
  }

  public void sendMessageWithRetry(ProducerRecord<String, String> producerRecord) {
    RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setBackOffPolicy(fibonacciBackoffPolicyRetry);

    try {
      retryTemplate.execute(context -> {
        kafkaTemplate.send(producerRecord).get();
        return null; 
      });
    } catch (Exception e) {
      ExtractorAdvice.put("data.data.mapAttributes.key-st-error", "error send invoice-payment-plard");
      extractor.execute("telemetria_log_category");
      
      log.error("Error sending message to Kafka after retries", e);
      throw new RuntimeException("Failed to send message to Kafka after retries", e);
    }
  }
  
}

-------------------------

import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.retry.support.RetryTemplate;

import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class KafkaProviderTest {

    @Mock
    private InvoicePaymentYkProperties invoicePaymentYkProperties;
    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;
    @Mock
    private InvoicePaymentPlardMapper invoicePaymentPlardMapper;
    @Mock
    private ObjectMapper objectMapper;
    @Mock
    private ExtractorAdvice extractor;
    @Mock
    private FibonacciBackoffPolicyRetry fibonacciBackoffPolicyRetry;

    @InjectMocks
    private KafkaProvider kafkaProvider;

    private BilledInvoicePlard billedInvoicePlard;
    private BilledInvoicePlardDTO billedInvoicePlardDTO;

    @BeforeEach
    void setUp() {
        billedInvoicePlard = new BilledInvoicePlard();
        billedInvoicePlardDTO = BilledInvoicePlardDTO.builder()
                .invoiceInfo(InvoiceInfoDTO.builder()
                        .paymentType("paymentType")
                        .externalReference("externalReference")
                        .build())
                .build();
    }

    @Test
    void sendMessageSendMessageToKafka() throws Exception {
        when(invoicePaymentYkProperties.getPlardTopic()).thenReturn("invoice-payment-plard");
        when(invoicePaymentPlardMapper.toDto(billedInvoicePlard)).thenReturn(billedInvoicePlardDTO);
        when(objectMapper.writeValueAsString(billedInvoicePlardDTO)).thenReturn("messageBody");
        
        CompletableFuture<Void> future = CompletableFuture.completedFuture(null);
        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);
        
        kafkaProvider.sendMessage(billedInvoicePlard);
        
        ArgumentCaptor<ProducerRecord<String, String>> captor = ArgumentCaptor.forClass(ProducerRecord.class);
        verify(kafkaTemplate, atLeastOnce()).send(captor.capture());
        assertEquals(1, captor.getAllValues().size());
        verify(extractor, never()).execute(anyString());
    }

    @Test
    void sendMessageThrowsException() {
        assertThrows(NullPointerException.class, () -> kafkaProvider.sendMessage(null));
    }

    @Test
    void sendMessageThrowsErrorSendTopicKafkaException() throws Exception {
        when(invoicePaymentPlardMapper.toDto(billedInvoicePlard)).thenReturn(billedInvoicePlardDTO);
        when(objectMapper.writeValueAsString(billedInvoicePlardDTO))
                .thenThrow(new JsonProcessingException("") {
                });

        assertThrows(
                ErrorSendTopicKafkaException.class,
                () -> kafkaProvider.sendMessage(billedInvoicePlard));
    }

    @Test
    void sendMessageWithRetrySuccess() throws Exception {
        // Mock only the necessary methods
        when(invoicePaymentYkProperties.getPlardTopic()).thenReturn("invoice-payment-plard");
        when(invoicePaymentPlardMapper.toDto(billedInvoicePlard)).thenReturn(billedInvoicePlardDTO);
        when(objectMapper.writeValueAsString(billedInvoicePlardDTO)).thenReturn("messageBody");

        // Mock KafkaTemplate to return a valid CompletableFuture
        CompletableFuture<Void> future = CompletableFuture.completedFuture(null);
        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Call the method under test
        kafkaProvider.sendMessageWithRetry(new ProducerRecord<>("invoice-payment-plard", "messageBody"));

        // Capture the arguments passed to KafkaTemplate.send
        ArgumentCaptor<ProducerRecord<String, String>> captor = ArgumentCaptor.forClass(ProducerRecord.class);
        verify(kafkaTemplate, atLeastOnce()).send(captor.capture());

        // Verify the interactions
        assertEquals(1, captor.getAllValues().size());
        verify(extractor, never()).execute(anyString());
    }

    @Test
    void sendMessageWithRetryFailure() throws Exception {
        // Mock only the necessary methods
        when(invoicePaymentYkProperties.getPlardTopic()).thenReturn("invoice-payment-plard");
        when(invoicePaymentPlardMapper.toDto(billedInvoicePlard)).thenReturn(billedInvoicePlardDTO);
        when(objectMapper.writeValueAsString(billedInvoicePlardDTO)).thenReturn("messageBody");

        // Mock KafkaTemplate to throw an exception
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("invoice-payment-plard", "messageBody");
        doThrow(new RuntimeException("Kafka send failed")).when(kafkaTemplate).send(any(ProducerRecord.class));

        // Call the method under test and assert the exception
        assertThrows(RuntimeException.class, () -> kafkaProvider.sendMessageWithRetry(producerRecord));

        // Verify the interactions
        verify(kafkaTemplate, times(1)).send(producerRecord);
        verify(extractor, times(1)).execute("telemetria_log_category");
    }
}

org.mockito.exceptions.misusing.UnnecessaryStubbingException: 
Unnecessary stubbings detected.
Clean & maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -> at com.santander.mpa.infra.messageprovider.KafkaProviderTest.sendMessageWithRetrySuccess(KafkaProviderTest.java:101)
  2. -> at com.santander.mpa.infra.messageprovider.KafkaProviderTest.sendMessageWithRetrySuccess(KafkaProviderTest.java:102)
  3. -> at com.santander.mpa.infra.messageprovider.KafkaProviderTest.sendMessageWithRetrySuccess(KafkaProviderTest.java:103)
Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.

	at org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:192)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)

Java HotSpot(TM) 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
09:02:30.471 [main] ERROR com.santander.mpa.infra.messageprovider.KafkaProvider -- Error sending message to Kafka after retries
java.lang.RuntimeException: Kafka send failed
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:576)
	at com.santander.mpa.infra.messageprovider.KafkaProvider.lambda$0(KafkaProvider.java:60)
	at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:335)
	at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:211)
	at com.santander.mpa.infra.messageprovider.KafkaProvider.sendMessageWithRetry(KafkaProvider.java:59)
	at com.santander.mpa.infra.messageprovider.KafkaProviderTest.lambda$2(KafkaProviderTest.java:133)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:53)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:35)
	at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3115)
	at com.santander.mpa.infra.messageprovider.KafkaProviderTest.sendMessageWithRetryFailure(KafkaProviderTest.java:133)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:728)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:218)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:214)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:139)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)

org.mockito.exceptions.verification.TooManyActualInvocations: 
kafkaTemplate.send(
    ProducerRecord(topic=invoice-payment-plard, partition=null, headers=RecordHeaders(headers = [], isReadOnly = false), key=null, value=messageBody, timestamp=null)
);
Wanted 1 time:
-> at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:576)
But was 3 times:
-> at com.santander.mpa.infra.messageprovider.KafkaProvider.lambda$0(KafkaProvider.java:60)
-> at com.santander.mpa.infra.messageprovider.KafkaProvider.lambda$0(KafkaProvider.java:60)
-> at com.santander.mpa.infra.messageprovider.KafkaProvider.lambda$0(KafkaProvider.java:60)



	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:576)
	at com.santander.mpa.infra.messageprovider.KafkaProviderTest.sendMessageWithRetryFailure(KafkaProviderTest.java:136)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)

