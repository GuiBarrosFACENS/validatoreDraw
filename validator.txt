import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ActiveProfiles;

@ExtendWith(MockitoExtension.class)
@ActiveProfiles("teste")
class ValidateBilledInvoiceYKCommandTest {

    @InjectMocks
    private ValidateBilledInvoiceYKCommand validateBilledInvoiceYKCommand;

    private WhitelistValidation whitelistValidation;

    private BilledInvoiceYK billedInvoiceYK;

    @BeforeEach
    void setUp() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        billedInvoiceYK =
                objectMapper.readValue(
                        new File("src/test/resources/json/billedInvoiceYK.json"), BilledInvoiceYK.class);
    }

    @Test
    void testExecute_ValidInvoice_NoExceptionThrown() {
        billedInvoiceYK.setPayd(true);
        billedInvoiceYK.setPayedValue(BigDecimal.ONE);

        assertDoesNotThrow(() -> validateBilledInvoiceYKCommand.execute(billedInvoiceYK));
    }

    @Test
    void testExecute_InvalidInvoice_ThrowsValidationException() {
        billedInvoiceYK.setPayd(false);
        billedInvoiceYK.setPayedValue(BigDecimal.ZERO);

        ValidationException exception =
                assertThrows(
                        ValidationException.class,
                        () -> validateBilledInvoiceYKCommand.execute(billedInvoiceYK));
        assertFalse(exception.getMessage().contains("payedValue cannot be null or empty!"));
    }

    @Test
    void testCreateMessage_WithViolations() {
        Map<String, String> violations = Map.of("field1", "error1", "field2", "error2");
        String message = validateBilledInvoiceYKCommand.createMessage(violations);

        assertTrue(message.contains("error1"));
        assertTrue(message.contains("error2"));
    }

    @Test
    void testCreateMessage_NoViolations() {
        Map<String, String> violations = Collections.emptyMap();
        String message = validateBilledInvoiceYKCommand.createMessage(violations);

        assertEquals("", message);
    }

    @Test
    void testExecute_AllFieldsValid_NoExceptionThrown() {
        billedInvoiceYK.setPayd(true);
        billedInvoiceYK.setPayedValue(BigDecimal.ONE);
        billedInvoiceYK.setMessage("Test message");

        assertDoesNotThrow(() -> validateBilledInvoiceYKCommand.execute(billedInvoiceYK));
    }

    @Test
    void testExecute_NullFields_ThrowsValidationException() {
        billedInvoiceYK.setMessage(null);

        ValidationException exception =
                assertThrows(
                        ValidationException.class,
                        () -> validateBilledInvoiceYKCommand.execute(billedInvoiceYK));
        assertFalse(exception.getMessage().contains("message cannot be null or empty!"));
    }

    @Test
    void testExecute_EmptyStringFields_ThrowsValidationException() {
        billedInvoiceYK.setMessage("");

        ValidationException exception =
                assertThrows(
                        ValidationException.class,
                        () -> validateBilledInvoiceYKCommand.execute(billedInvoiceYK));
        assertFalse(exception.getMessage().contains("message cannot be null or empty!"));
    }

    @Test
    void testExecute_BigDecimalLessThanOrEqualToZero_ThrowsValidationException() {
        billedInvoiceYK.setPayedValue(BigDecimal.ZERO);
        billedInvoiceYK.setBankCode(BigDecimal.valueOf(-1));

        ValidationException exception =
                assertThrows(
                        ValidationException.class,
                        () -> validateBilledInvoiceYKCommand.execute(billedInvoiceYK));
        assertFalse(exception.getMessage().contains("payedValue cannot be null or empty!"));
        assertFalse(exception.getMessage().contains("bankCode cannot be null or empty!"));
    }

}
