package com.santader.example.impl;

import com.santader.example.PlaceList;
import com.santader.place.City;
import com.santader.place.Country;
import com.santader.place.State;

import java.util.List;
import java.util.Optional;

public class PlaceListImpl implements PlaceList {

  /**
   * @param country Um país qualquer
   * @return Uma lista com os nomes dos estados do país
   */
  @Override
  public List<String> getStatesNames(Country country) {
    return null;
  }

  /**
   * @param country Um país qualquer
   * @return uma lista com os nomes das cidades de um país
   */
  @Override
  public List<String> getCitiesNames(Country country) {
    return null;
  }

  /**
   * @param cities Uma lista de Cidades
   * @return Uma lista com as cidades ordenadas alfabeticamente
   */
  @Override
  public List<City> getAlphabeticalCities(List<City> cities) {
    return null;
  }

  /**
   * @param cities Uma lista de Cidades
   * @return Uma lista com as cidades com mais de um milhão de habitantes
   */
  @Override
  public List<City> getCitiesWithMoreThanOneMillionPeople(List<City> cities) {
    return null;
  }

  /**
   * @param state Um estado qualquer
   * @return A população deste estado
   */
  @Override
  public Integer getStatePopulation(State state) {
    return null;
  }

  /**
   * @param country Um país qualquer
   * @return A população do país
   */
  @Override
  public Integer getCountryPopulation(Country country) {
    return null;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado possuir uma cidade com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateSuperPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado possuir todas as cidades com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateStupidlyPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado não possuir cidades com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateSubPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Quantidade de cidades com população maior que 1 milhão de um estado
   */
  @Override
  public long getStateSuperPopulatedCitiesQuantity(State state) {
    return 0;
  }

  /**
   * @param country  Um país qualquer
   * @param cityName O nome da cidade a ser buscada
   * @return A cidade que possua o nome igual cityName
   */
  @Override
  public Optional<City> findCity(Country country, String cityName) {
    return Optional.empty();
  }
}
package com.santader.example.impl;

import com.santader.example.PlaceList;
import com.santader.place.City;
import com.santader.place.Country;
import com.santader.place.State;

import java.util.List;
import java.util.Optional;

public class PlaceListImpl implements PlaceList {

  /**
   * @param country Um país qualquer
   * @return Uma lista com os nomes dos estados do país
   */
  @Override
  public List<String> getStatesNames(Country country) {
    return null;
  }

  /**
   * @param country Um país qualquer
   * @return uma lista com os nomes das cidades de um país
   */
  @Override
  public List<String> getCitiesNames(Country country) {
    return null;
  }

  /**
   * @param cities Uma lista de Cidades
   * @return Uma lista com as cidades ordenadas alfabeticamente
   */
  @Override
  public List<City> getAlphabeticalCities(List<City> cities) {
    return null;
  }

  /**
   * @param cities Uma lista de Cidades
   * @return Uma lista com as cidades com mais de um milhão de habitantes
   */
  @Override
  public List<City> getCitiesWithMoreThanOneMillionPeople(List<City> cities) {
    return null;
  }

  /**
   * @param state Um estado qualquer
   * @return A população deste estado
   */
  @Override
  public Integer getStatePopulation(State state) {
    return null;
  }

  /**
   * @param country Um país qualquer
   * @return A população do país
   */
  @Override
  public Integer getCountryPopulation(Country country) {
    return null;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado possuir uma cidade com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateSuperPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado possuir todas as cidades com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateStupidlyPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado não possuir cidades com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateSubPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Quantidade de cidades com população maior que 1 milhão de um estado
   */
  @Override
  public long getStateSuperPopulatedCitiesQuantity(State state) {
    return 0;
  }

  /**
   * @param country  Um país qualquer
   * @param cityName O nome da cidade a ser buscada
   * @return A cidade que possua o nome igual cityName
   */
  @Override
  public Optional<City> findCity(Country country, String cityName) {
    return Optional.empty();
  }
}
