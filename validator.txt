import com.santander.mpa.domain.enums.RecordTypeEnum;
import com.santander.mpa.domain.enums.SegmentTypeEnum;
import com.santander.mpa.domain.usecase.FileSegmentsBuilderUseCase;
import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileSegmentsBuilderUseCaseImpl implements FileSegmentsBuilderUseCase {

  private static final Logger logger =
      LoggerFactory.getLogger(FileSegmentsBuilderUseCaseImpl.class);
  private final Map<String, List<String>> lineHashMap = new HashMap<>();
  private Integer actualCount = 0;

  @Override
  public String processLine(String line) {
    logger.info("Processing line: {}", line);

    String recordType = String.valueOf(line.charAt(7));
    String segmentRecordDetailCode = String.valueOf(line.charAt(13));
    boolean firstLine = SegmentTypeEnum.isT(segmentRecordDetailCode) && actualCount == 0;

    if (RecordTypeEnum.isHeader(recordType)) {
      String beneficiaryCode = line.substring(52, 61);
      newLine(RecordTypeEnum.FILE_HEADER.getRecordTypeCode(), beneficiaryCode);
      return null;
    } else if (RecordTypeEnum.isDetail(recordType)) {
      if (firstLine) {
        actualCount++;
        newLine(String.valueOf(actualCount), line);
        return null;
      } else {
        if (SegmentTypeEnum.isT(segmentRecordDetailCode)) {
          Integer lastCount = actualCount;
          actualCount++;
          newLine(String.valueOf(actualCount), line);

          String lineBuilded = buildLineByKey(lastCount).toString();

          lineHashMap.remove(String.valueOf(lastCount));
          return lineBuilded;
        } else {
          newLine(String.valueOf(actualCount), line);
          return null;
        }
      }
    } else if (RecordTypeEnum.isBatchTrailer(recordType)) {
      return buildLineByKey(actualCount).toString();
    } else return null;
  }

  @Override
  public StringBuilder build() {
    StringBuilder fileLines = new StringBuilder();

    String beneficiaryCode = lineHashMap.get(RecordTypeEnum.FILE_HEADER.getRecordTypeCode()).get(0);
    lineHashMap.forEach(
        (key, value) -> {
          StringBuilder line = new StringBuilder();

          if (RecordTypeEnum.isHeader(key)) return;

          value.forEach(line::append);
          line.append(beneficiaryCode);
          line.append("\n");

          fileLines.append(line);
        });

    return fileLines;
  }

  private StringBuilder buildLineByKey(Integer key) {
    String beneficiaryCode = lineHashMap.get(RecordTypeEnum.FILE_HEADER.getRecordTypeCode()).get(0);

    List<String> linesByKey = lineHashMap.get(String.valueOf(key));

    StringBuilder line = new StringBuilder();
    linesByKey.forEach(line::append);
    line.append(beneficiaryCode);
    line.append("\n");

    return line;
  }

  private void newLine(String lineNumber, String line) {
    if (lineHashMap.containsKey(lineNumber)) {
      lineHashMap.get(lineNumber).add(line);
    } else {
      List<String> lines = new ArrayList<>();
      lines.add(line);
      lineHashMap.put(lineNumber, lines);
    }
  }

  public Map<String, List<String>> getLineHashMap() {
    return lineHashMap;
  }
}



cnab 


03300000        2000039536904010308480130002571     004928369           PAD CONF JOAO DIAS TESTE PERF BANCO SANTANDER (BRASIL) S/A            221052024      003247040                                                                          
03300221T01  040 2000039536904010004928369           308480130002571     PAD CONF JOAO DIAS TESTE PERF                                                                                 0000324721052024                                         
0330022300001T 61308480130002571        81915600014122401660000013420140520240000000001042740333084800334401660000013420095  001000057680361991WITYAE CUBEMSU GHOUAR                   01300025710000000000000000000000000                      
0330022300002U 610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002105202421052024000021052024000000000000000                              000                           
0330022316989T 03308480130002571        82414200012032621669970072111050620240000000000000000333084800338621669970072111173  002007689002000189AMSDUAH K.A                             01300025710000000000000004748475247                      
0330022316990U 030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002105202421052024000021052024000000000000000                              000                           
03300225         0169901451910081444183736426000000000000000000000000000000000000000000000000000000000000000000000000000033                                                                                                                     
03300229         000001016994                                                                                                                                                                                                                   
