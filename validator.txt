-------

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.validation.ValidationException;
import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class ValidatTest {

    @Mock
    private WhitelistValidation whitelistValidation;

    @InjectMocks
    private Validat validat;

    private BilledInvoiceYK billedInvoiceYK;

    @BeforeEach
    public void setUp() {
        billedInvoiceYK = new BilledInvoiceYK();  // configure as propriedades necess√°rias
    }

    @Test
    public void testExecute_noViolations() {
        Map<String, String> noViolations = new HashMap<>();
        when(WhitelistValidation.validateFields(billedInvoiceYK)).thenReturn(noViolations);

        assertDoesNotThrow(() -> validat.execute(billedInvoiceYK));
    }

    @Test
    public void testExecute_withViolations() {
        Map<String, String> violations = new HashMap<>();
        violations.put("bankCode", "bankCode cannot be null or empty!");
        when(WhitelistValidation.validateFields(billedInvoiceYK)).thenReturn(violations);

        ValidationException exception = assertThrows(ValidationException.class, () -> validat.execute(billedInvoiceYK));
        assertTrue(exception.getMessage().contains("bankCode cannot be null or empty!"));
    }

    // Test private method indirectly through the public method
    @Test
    public void testCreateMessage() {
        Map<String, String> violations = new HashMap<>();
        violations.put("bankCode", "bankCode cannot be null or empty!");

        String expectedMessage = "'bankCode cannot be null or empty!'\n";

        when(WhitelistValidation.validateFields(billedInvoiceYK)).thenReturn(violations);

        ValidationException exception = assertThrows(ValidationException.class, () -> validat.execute(billedInvoiceYK));
        assertEquals(expectedMessage.trim(), exception.getMessage().trim());
    }
}


import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.santander.mpa.domain.entity.BilledInvoiceYK;
import com.santander.mpa.service.Validat;
import com.santander.mpa.service.ValidationException;
import com.santander.mpa.service.WhitelistValidation; // Assuming WhitelistValidation is a service

public class ValidatTest {

    @Mock
    private BilledInvoiceYK billedInvoiceYK;

    @Mock
    private WhitelistValidation whitelistValidation;

    private Validat validationService;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        validationService = new Validat();
    }

    @Test
    public void testExecute_ValidInvoice() throws Exception {
        when(whitelistValidation.validateFields(any(BilledInvoiceYK.class))).thenReturn(Collections.emptyMap());
        validationService.execute(billedInvoiceYK);
        // No exception expected for valid invoice
    }

    @Test
    public void testExecute_InvalidInvoice_ThrowsException() throws Exception {
        Map<String, String> violations = Collections.singletonMap("bankCode", "bankCode cannot be null or empty!");
        when(whitelistValidation.validateFields(any(BilledInvoiceYK.class))).thenReturn(violations);

        assertThrows(ValidationException.class, () -> validationService.execute(billedInvoiceYK));
    }

    @Test
    public void testCreateMessage_EmptyViolations() throws Exception {
        Map<String, String> emptyViolations = Collections.emptyMap();
        String message = validationService.createMessage(emptyViolations);
        assertEquals("", message); // Empty message for empty violations
    }

    @Test
    public void testCreateMessage_WithViolations() throws Exception {
        Map<String, String> violations = Collections.singletonMap("bankCode", "bankCode cannot be null or empty!");
        String message = validationService.createMessage(violations);
        assertEquals("'bankCode cannot be null or empty!'", message); // Formatted message expected
    }
}




