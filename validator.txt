package com.santader.example;

import com.santader.bank.Bank;
import com.santader.bank.Client;
import com.santader.bank.Person;
import com.santader.bank.Transaction;

import java.util.List;
import java.util.Set;

public interface BankList {
  /**
   * @param client Cliente
   * @return Lista de númeors das contas de um cliente
   */
  List<String> getAccountsNumbers(Client client);

  /**
   * +
   *
   * @param client Cliente
   * @return Lista de transações de um cliente
   */
  List<Transaction> getTransactions(Client client);

  /**
   *
   * @param bank Banco
   * @return Lista com os nomes das mães dos clientes de um banco (para clientes sem mae no cadastro: "----------")`
   */
  List<String> getClientsMotherName(Bank bank);

  /**
   *
   * @param bank Banco
   * @return Lista com os clientes com mais de 40 anos de idade
   */
  List<Client> getOldestClients(Bank bank);

  /**
   *
   * @param client Cliente
   * @return Soma de todas as transações de um cliente
   */
  Double getTotalMoney(Client client);

  /**
   *
   * @param bank Banco
   * @return Soma de todas as transações de um banco
   */
  Double getTotalMoney(Bank bank);

  /**
   *
   * @param bank Banco
   * @return Lista com os clientes mais ricos de um banco ordenado do maior para o menor
   */
  List<Client> getSortedRichestClients(Bank bank);

  /**
   *
   * @param bank Banco
   * @return Lista com os nomes dos pais dos clientes com menos de 25 anos de um banco
   */
  List<Person> getFathersFromYoungestClients(Bank bank);

  /**
   *
   * @param bank Banco
   * @return Criar uma String que represente um relatório com as seguintes colunas (separadas por vírgula):<br/>
   * Nome do cliente, Idade, Total de dinheiro <br>
   * Ex: <br/>
   *  José da silva, 18, 10,00 <br>
   *  Maria da silva, 25, 100,00 <br>
   */
  String getReportString(Bank bank);

  /**
   *
   * @param bank Bank
   * @return Lista com os nomes das agências de um banco sem repetições
   */
  Set<String> getAgencies(Bank bank);

  /**
   *
   * @param bank Bank
   * @return Lista com os pais dos clientes mais novos (menores de 25 anos) de um banco. <br>
   * Para todos os clientes enviar um email promocional dos dias dos pais (A mensagem é um log)
   * para os clientes que possuem pai, enviar uma mensagem de feliz dias dos pais para o email do pai (A mensagem é um log)
   *
   */
  List<Person> getYoungestClientsFathersAndSendEmails(Bank bank);

  /**
   *
   * @param client Cliente
   * @param value Valor a ser comparado
   * @return Um booleano que indica se o cliente gastou mais que o valor passado em alguma transação
   */
  boolean isClientSpentMoreThan(Client client, Double value);

  /**
   *
   * @param client Cliente
   * @return Um booleano que indica se o cliente possui todas as contas ativas (pelo menos uma transação)
   */
  boolean isClientWithAllAccountsActive(Client client);

  /**
   *
   * @param client cliente
   * @return Um booleano que indica se o cliente possui todas as contas inativas (nenhuma transação)
   * */
  boolean isClientWithAllAccountsInactive(Client client);

  /**
   *
   * @param client Cliente
   * @return A quantiade de transações de entrada (value > 0) de um cliente
   */
  Long clientIncomingTransactionsCount(Client client);

  /**
   *
   * @param bank Banco
   * @param value Valor a ser comparado
   * @return Lista com os clientes que possuem todas as contas ativas e gastaram mais que o valor passado
   * em pelo menos uma transação
   */
  List<Client> getClientsWithAllAccountsAtiveAndSpentMoreThan(Bank bank, Double value);

}
