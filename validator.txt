package com.santader.example.impl;

import com.santader.example.PlaceList;
import com.santader.place.City;
import com.santader.place.Country;
import com.santader.place.State;

import java.util.List;
import java.util.Optional;

public class PlaceListImpl implements PlaceList {

  /**
   * @param country Um país qualquer
   * @return Uma lista com os nomes dos estados do país
   */
  @Override
  public List<String> getStatesNames(Country country) {
    return null;
  }

  /**
   * @param country Um país qualquer
   * @return uma lista com os nomes das cidades de um país
   */
  @Override
  public List<String> getCitiesNames(Country country) {
    return null;
  }

  /**
   * @param cities Uma lista de Cidades
   * @return Uma lista com as cidades ordenadas alfabeticamente
   */
  @Override
  public List<City> getAlphabeticalCities(List<City> cities) {
    return null;
  }

  /**
   * @param cities Uma lista de Cidades
   * @return Uma lista com as cidades com mais de um milhão de habitantes
   */
  @Override
  public List<City> getCitiesWithMoreThanOneMillionPeople(List<City> cities) {
    return null;
  }

  /**
   * @param state Um estado qualquer
   * @return A população deste estado
   */
  @Override
  public Integer getStatePopulation(State state) {
    return null;
  }

  /**
   * @param country Um país qualquer
   * @return A população do país
   */
  @Override
  public Integer getCountryPopulation(Country country) {
    return null;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado possuir uma cidade com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateSuperPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado possuir todas as cidades com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateStupidlyPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado não possuir cidades com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateSubPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Quantidade de cidades com população maior que 1 milhão de um estado
   */
  @Override
  public long getStateSuperPopulatedCitiesQuantity(State state) {
    return 0;
  }

  /**
   * @param country  Um país qualquer
   * @param cityName O nome da cidade a ser buscada
   * @return A cidade que possua o nome igual cityName
   */
  @Override
  public Optional<City> findCity(Country country, String cityName) {
    return Optional.empty();
  }
}
package com.santader.example.impl;

import com.santader.example.PlaceList;
import com.santader.place.City;
import com.santader.place.Country;
import com.santader.place.State;

import java.util.List;
import java.util.Optional;

public class PlaceListImpl implements PlaceList {

  /**
   * @param country Um país qualquer
   * @return Uma lista com os nomes dos estados do país
   */
  @Override
  public List<String> getStatesNames(Country country) {
    return null;
  }

  /**
   * @param country Um país qualquer
   * @return uma lista com os nomes das cidades de um país
   */
  @Override
  public List<String> getCitiesNames(Country country) {
    return null;
  }

  /**
   * @param cities Uma lista de Cidades
   * @return Uma lista com as cidades ordenadas alfabeticamente
   */
  @Override
  public List<City> getAlphabeticalCities(List<City> cities) {
    return null;
  }

  /**
   * @param cities Uma lista de Cidades
   * @return Uma lista com as cidades com mais de um milhão de habitantes
   */
  @Override
  public List<City> getCitiesWithMoreThanOneMillionPeople(List<City> cities) {
    return null;
  }

  /**
   * @param state Um estado qualquer
   * @return A população deste estado
   */
  @Override
  public Integer getStatePopulation(State state) {
    return null;
  }

  /**
   * @param country Um país qualquer
   * @return A população do país
   */
  @Override
  public Integer getCountryPopulation(Country country) {
    return null;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado possuir uma cidade com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateSuperPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado possuir todas as cidades com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateStupidlyPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Se o estado não possuir cidades com mais de 1 milhão de habitantes
   */
  @Override
  public boolean isStateSubPopulated(State state) {
    return false;
  }

  /**
   * @param state Um estado qualquer
   * @return Quantidade de cidades com população maior que 1 milhão de um estado
   */
  @Override
  public long getStateSuperPopulatedCitiesQuantity(State state) {
    return 0;
  }

  /**
   * @param country  Um país qualquer
   * @param cityName O nome da cidade a ser buscada
   * @return A cidade que possua o nome igual cityName
   */
  @Override
  public Optional<City> findCity(Country country, String cityName) {
    return Optional.empty();
  }
}


package com.santader;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.santader.example.impl.PlaceListImpl;
import com.santader.place.City;
import com.santader.place.Country;
import com.santader.place.State;

import java.util.ArrayList;
import java.util.List;

public class MainPlaces {
  private static final PlaceListImpl placeList = new PlaceListImpl();

  public static List<City> cities = new ArrayList<>();
  public static List<State> states = new ArrayList<>();
  public static Country country;
  public static City city;
  public static State state;
  public static void main(String[] args) throws JsonProcessingException {
    initiPlacesData();

    var res = placeList.getStatesNames(country);
//    var res = placeList.getCitiesNames(country);
//    var res = placeList.getAlphabeticalCities(cities);
//    var res = placeList.getCitiesWithMoreThanOneMillionPeople(cities);
//    var res = placeList.getStatePopulation(state);
//    var res = placeList.getCountryPopulation(country);
//    var red7 = placeList.isStateSuperPopulated(state);
//    var res = placeList.isStateStupidlyPopulated(state);
//    var res = placeList.isStateSubPopulated(state);
//    var res = placeList.getStateSuperPopulatedCitiesQuantity(state);
//    var res = placeList.findCity(country, "São Paulo");

    System.out.println(res);
  }

  public static void initiPlacesData() {
    Country brazil = new Country("Brasil");
    country = brazil;

    State sp = new State("São Paulo", "SP", brazil);
    State rj = new State("Rio de Janeiro", "RJ", brazil);
    State ro = new State("Rondônia", "RO", brazil);
    states.addAll(List.of(sp, rj, ro));
    state = sp;

    City saoPaulo = new City("São Paulo", sp, 12000000);
    City campinas = new City("Campinas", sp, 2000000);
    City saoJose = new City("São José dos Campos", sp, 900000);

    City rioDeJaneiro = new City("Rio de Janeiro", rj, 6000000);
    City niteroi = new City("Niterói", rj, 500000);

    City portoVelho = new City("Porto Velho", ro, 400000);

    city = saoPaulo;

    cities.addAll(List.of(saoPaulo, campinas, saoJose, rioDeJaneiro, niteroi, portoVelho));
  }

}
