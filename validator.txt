package com.example.demo.exception;

import javax.validation.ValidationException;

public class BoletoValidationException extends ValidationException {
    public BoletoValidationException(String message) {
        super(message);
    }
}


package com.example.demo.util;

import com.example.demo.domain.Boleto;
import com.example.demo.exception.BoletoValidationException;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

public class BoletoValidator {

    private static final Map<String, Function<Boleto, Object>> fieldAccessors = new HashMap<>();

    static {
        fieldAccessors.put("codigoDoBoleto", Boleto::getCodigoDoBoleto);
        fieldAccessors.put("dataDeVencimento", Boleto::getDataDeVencimento);
        fieldAccessors.put("valorDoBoleto", Boleto::getValorDoBoleto);
        fieldAccessors.put("nomeDoPagador", Boleto::getNomeDoPagador);
        fieldAccessors.put("cpfDoPagador", Boleto::getCpfDoPagador);
        fieldAccessors.put("bancoEmissor", Boleto::getBancoEmissor);
        fieldAccessors.put("linhaDigitavel", Boleto::getLinhaDigitavel);
    }

    public static void validarCamposObrigatorios(Boleto boleto) {
        if (boleto.isPago()) {
            for (Map.Entry<String, Function<Boleto, Object>> entry : fieldAccessors.entrySet()) {
                String fieldName = entry.getKey();
                Object fieldValue = entry.getValue().apply(boleto);

                if (isNullOrEmpty(fieldValue)) {
                    throw new BoletoValidationException(String.format("%s não pode ser nulo ou vazio.", capitalize(fieldName)));
                }
            }
        }
    }

    private static boolean isNullOrEmpty(Object value) {
        if (value == null) {
            return true;
        }
        if (value instanceof String) {
            return ((String) value).trim().isEmpty();
        }
        if (value instanceof BigDecimal) {
            return ((BigDecimal) value).compareTo(BigDecimal.ZERO) <= 0;
        }
        return false;
    }

    private static String capitalize(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        return Character.toUpperCase(str.charAt(0)) + str.substring(1);
    }
}


package com.example.demo.service;

import com.example.demo.domain.Boleto;
import com.example.demo.util.BoletoValidator;
import org.springframework.stereotype.Service;

import javax.validation.Valid;

@Service
public class BoletoService {

    public void validarBoleto(@Valid Boleto boleto) {
        BoletoValidator.validarCamposObrigatorios(boleto);
    }
}


package com.example.demo.api;

import com.example.demo.domain.Boleto;
import com.example.demo.exception.BoletoValidationException;
import com.example.demo.service.BoletoService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;

@RestController
public class BoletoApiController implements BoletoApi {

    private final BoletoService boletoService;

    public BoletoApiController(BoletoService boletoService) {
        this.boletoService = boletoService;
    }

    @Override
    public ResponseEntity<String> processBoleto(@Valid @RequestBody Boleto boleto) {
        boletoService.validarBoleto(boleto);
        return ResponseEntity.ok("Dados válidos");
    }

    @ExceptionHandler(BoletoValidationException.class)
    public ResponseEntity<String> handleValidationException(BoletoValidationException ex) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
    }
}