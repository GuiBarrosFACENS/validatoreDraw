import com.santander.mpa.infra.dto.PlardMetadataDTO;
import com.santander.mpa.infra.repository.PlardMetadataRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PlardDatabaseControlProcessorImplTest {

    private PlardMetadataRepository plardMetadataRepository;
    private PlardDatabaseControlProcessorImpl plardDatabaseControlProcessor;

    @BeforeEach
    void setUp() {
        plardMetadataRepository = mock(PlardMetadataRepository.class);
        plardDatabaseControlProcessor = new PlardDatabaseControlProcessorImpl(plardMetadataRepository);
    }

    @Test
    void verifyPlardItemInDB_exists() {
        PlardMetadataDTO plardMetadataDTO = new PlardMetadataDTO();
        plardMetadataDTO.setIdMetadados(1L);

        when(plardMetadataRepository.findById(1L)).thenReturn(Optional.of(new PlardMetadataDTO()));

        boolean result = plardDatabaseControlProcessor.verifyPlardItemInDB(plardMetadataDTO);

        assertTrue(result);
        verify(plardMetadataRepository, times(1)).findById(1L);
    }

    @Test
    void verifyPlardItemInDB_doesNotExist() {
        PlardMetadataDTO plardMetadataDTO = new PlardMetadataDTO();
        plardMetadataDTO.setIdMetadados(1L);

        when(plardMetadataRepository.findById(1L)).thenReturn(Optional.empty());

        boolean result = plardDatabaseControlProcessor.verifyPlardItemInDB(plardMetadataDTO);

        assertFalse(result);
        verify(plardMetadataRepository, times(1)).findById(1L);
    }

    @Test
    void saveInDatabase() {
        PlardMetadataDTO plardMetadataDTO = new PlardMetadataDTO();

        plardDatabaseControlProcessor.saveInDatabase(plardMetadataDTO);

        verify(plardMetadataRepository, times(1)).save(plardMetadataDTO);
    }
}
