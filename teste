
package com.santander.mpa.infra.config;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.santander.extractor.config.CustomPropertiesExtratorConfiguration;
import com.santander.extractor.utils.ExtractorAdvice;
import com.santander.mpa.app.dto.InvoicePaymentFileDTO;
import com.santander.mpa.app.service.KafkaWriterCustomService;
import com.santander.mpa.domain.command.impl.VerifyingDigitCalculatorCommandImpl;
import com.santander.mpa.domain.entity.InvoicePaymentFile;
import com.santander.mpa.domain.usecase.impl.NumericBarCodeBuilderUseCaseImpl;
import com.santander.mpa.domain.usecase.impl.VerifyingDigitCalculatorUseCaseImpl;
import com.santander.mpa.infra.logger.LoggerChuckListener;
import com.santander.mpa.infra.logger.LoggerStepListener;
import com.santander.mpa.infra.mapper.LineMapper;
import lombok.AllArgsConstructor;
import org.springframework.batch.core.ChunkListener;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.StepExecutionListener;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.core.task.TaskExecutor;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
@AllArgsConstructor
@ComponentScan(basePackages = {"com.santander.mpa","com.santander.extractor"})
@EnableConfigurationProperties(CustomPropertiesExtratorConfiguration.class)
public class BatchConfiguration {

  @Bean
  @Profile("!test")
  public FlatFileItemReader<InvoicePaymentFileDTO> flatFileItemReader(LineMapper lineMapper) {
    return new FlatFileItemReaderBuilder<InvoicePaymentFileDTO>()
        .resource(new ClassPathResource("s3-bucket/arquivo-retorno-teste.txt"))
        .lineMapper((line, lineNumber) -> lineMapper.convert(line))
        .name("readerFile")
        .build();
  }

  @Bean
  public Step sendKafkaStep(
      JobRepository jobRepository,
      FlatFileItemReader<InvoicePaymentFileDTO> flatFileItemReader,
      ItemProcessor<InvoicePaymentFileDTO, InvoicePaymentFile> itemProcessorCustomService,
      KafkaWriterCustomService kafkaWriterCustomService,
      PlatformTransactionManager transactionManager,
      TaskExecutor taskExecutor,
      StepExecutionListener stepExecutionListener,
      ChunkListener chunkListener) {
    StepBuilder stepBuilder = new StepBuilder("sendKafkaStep", jobRepository);

    return stepBuilder
        .<InvoicePaymentFileDTO, InvoicePaymentFile>chunk(5000, transactionManager)
        .reader(flatFileItemReader)
        .processor(itemProcessorCustomService)
        .writer(kafkaWriterCustomService)
        //        .taskExecutor(taskExecutor)
        .listener(stepExecutionListener)
        .listener(chunkListener)
        .build();
  }

  @Bean
  public Job job(JobRepository jobRepository, Step sendKafkaStep) {
    return new JobBuilder("job", jobRepository).start(sendKafkaStep).build();
  }

  @Bean
  public ObjectMapper objectMapper() {
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);
    objectMapper.registerModule(new JavaTimeModule());
    objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
    return objectMapper;
  }

  /* TODO: Verificar o que fazer com o multithread  */
  @Bean
  public TaskExecutor taskExecutor() {
    SimpleAsyncTaskExecutor asyncTaskExecutor = new SimpleAsyncTaskExecutor("spring_batch");
    asyncTaskExecutor.setConcurrencyLimit(5);
    return asyncTaskExecutor;
  }

  @Bean
  public StepExecutionListener stepExecutionListener(ExtractorAdvice extractorAdvice) {
    return new LoggerStepListener(extractorAdvice);
  }

  @Bean
  public ChunkListener chunkListener() {
    return new LoggerChuckListener();
  }

  @Bean
  public VerifyingDigitCalculatorUseCaseImpl verifyingDigitCalculatorUseCaseImpl() {
    return new VerifyingDigitCalculatorUseCaseImpl();
  }

  @Bean
  public VerifyingDigitCalculatorCommandImpl verifyingDigitCalculatorCommandImpl(
      VerifyingDigitCalculatorUseCaseImpl verifyingDigitCalculatorUseCaseImpl) {
    return new VerifyingDigitCalculatorCommandImpl(verifyingDigitCalculatorUseCaseImpl);
  }

  @Bean
  public NumericBarCodeBuilderUseCaseImpl numericBarCodeBuilderUseCaseImpl(
      VerifyingDigitCalculatorCommandImpl verifyingDigitCalculatorCommandImpl) {
    return new NumericBarCodeBuilderUseCaseImpl(verifyingDigitCalculatorCommandImpl);
  }
}


esse é o meu batch


package com.santander.mpa;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients;

/** Main class for the AppArsenal application. */
@EnableFeignClients
@SpringBootApplication
public class ArsenalApplication {

  /**
   * Main method for initializing the AppArsenal application.
   *
   * @param args execution arguments.
   */
  public static void main(String[] args) {
    SpringApplication.run(ArsenalApplication.class, args);
  }

  /** Do not remove */
  public void copyright() {
    /**
     * ***********************************************************************
     *
     * <p>SANTANDER CONFIDENTIAL - ARCHETYPE GENERATION -
     *
     * <p>[2020] - [2020] Santander Tecnologia All Rights Reserved.
     *
     * <p>NOTICE: All information contained herein is, and remains the property of Santander
     * Tecnologia, if any. The intellectual and technical concepts contained herein are proprietary
     * to Santander Tecnologia and are protected by trade secret or copyright law. Dissemination of
     * this information or reproduction of this material is strictly forbidden unless prior written
     * permission is obtained from Santander Tecnologia.
     *
     * <p>####415253454E414C####
     */
  }
}


esse é meu  application, quero saber como eu coloco o schedule, e rode o job no intelij apos implementar ele é só 
ir no run do aplication e rodar ? como ja faço antes ai o app rodando eu já 
