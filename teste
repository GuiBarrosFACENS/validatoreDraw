    private PlardDatabaseControlProcessor plardDatabaseControlProcessor;
    private ProcessReceiverUserCaseImpl processReceiverUserCase;

    @BeforeEach
    void setUp() {
        plardDatabaseControlProcessor = mock(PlardDatabaseControlProcessor.class);
        processReceiverUserCase = new ProcessReceiverUserCaseImpl(plardDatabaseControlProcessor);
    }

    @Test
    void processReciveDataPlard_existsInDB() {
        PlardMetadataDTO plardMetadataDto = new PlardMetadataDTO();
        plardMetadataDto.setOgigin("testOrigin");
        plardMetadataDto.setPaymentMethod("testPaymentMethod");

        when(plardDatabaseControlProcessor.verifyPlardItemInDB(plardMetadataDto)).thenReturn(true);

        processReceiverUserCase.processReciveDataPlard(plardMetadataDto);

        assertEquals("PROCESSING", plardMetadataDto.getStatus());
        assertEquals("testOrigin", plardMetadataDto.getOgigin());
        assertEquals(LocalDate.now(), plardMetadataDto.getCreatedAt());
        assertEquals("testPaymentMethod", plardMetadataDto.getPaymentMethod());

        verify(plardDatabaseControlProcessor, times(1)).verifyPlardItemInDB(plardMetadataDto);
        verify(plardDatabaseControlProcessor, never()).saveInDatabase(plardMetadataDto);
    }

    @Test
    void processReciveDataPlard_doesNotExistInDB() {
        PlardMetadataDTO plardMetadataDto = new PlardMetadataDTO();
        plardMetadataDto.setOgigin("testOrigin");
        plardMetadataDto.setPaymentMethod("testPaymentMethod");

        when(plardDatabaseControlProcessor.verifyPlardItemInDB(plardMetadataDto)).thenReturn(false);

        processReceiverUserCase.processReciveDataPlard(plardMetadataDto);

        assertEquals("ERRO", plardMetadataDto.getStatus());

        verify(plardDatabaseControlProcessor, times(1)).verifyPlardItemInDB(plardMetadataDto);
        verify(plardDatabaseControlProcessor, times(1)).saveInDatabase(plardMetadataDto);
    }
