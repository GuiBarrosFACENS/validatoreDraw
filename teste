import com.santander.mpa.app.processor.PlardDatabaseControlProcessorImpl;
import com.santander.mpa.infra.dto.PlardMetadataDTO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.mockito.Mockito.*;

class ProcessReturnUserCaseImplTest {

    private PlardDatabaseControlProcessorImpl plardDatabaseControlProcessorImpl;
    private ProcessReturnUserCaseImpl processReturnUserCase;

    @BeforeEach
    void setUp() {
        plardDatabaseControlProcessorImpl = mock(PlardDatabaseControlProcessorImpl.class);
        processReturnUserCase = new ProcessReturnUserCaseImpl(plardDatabaseControlProcessorImpl);
    }

    @Test
    void processReturnDataPlard_reproved() {
        PlardMetadataDTO plardMetadataDTO = new PlardMetadataDTO();
        plardMetadataDTO.setStatus("REPROVED");

        processReturnUserCase.processReturnDataPlard(plardMetadataDTO);

        assertEquals("CLOSED", plardMetadataDTO.getStatus());
        assertEquals("REPROVED", plardMetadataDTO.getResolution());
        assertEquals("<MOTIVO A DEFINIR>", plardMetadataDTO.getReason());

        verify(plardDatabaseControlProcessorImpl, times(1)).saveInDatabase(plardMetadataDTO);
    }

    @Test
    void processReturnDataPlard_aproved() {
        PlardMetadataDTO plardMetadataDTO = new PlardMetadataDTO();
        plardMetadataDTO.setStatus("APROVED");

        processReturnUserCase.processReturnDataPlard(plardMetadataDTO);

        assertEquals("CLOSED", plardMetadataDTO.getStatus());
        assertEquals("EXECUTED", plardMetadataDTO.getResolution());

        verify(plardDatabaseControlProcessorImpl, times(1)).saveInDatabase(plardMetadataDTO);
    }

    @Test
    void processReturnDataPlard_otherStatus() {
        PlardMetadataDTO plardMetadataDTO = new PlardMetadataDTO();
        plardMetadataDTO.setStatus("OTHER");

        processReturnUserCase.processReturnDataPlard(plardMetadataDTO);

        assertEquals("OTHER", plardMetadataDTO.getStatus());
        assertNull(plardMetadataDTO.getResolution());
        assertNull(plardMetadataDTO.getReason());

        verify(plardDatabaseControlProcessorImpl, times(1)).saveInDatabase(plardMetadataDTO);
    }
}
