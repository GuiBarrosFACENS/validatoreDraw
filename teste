package com.santander.mpa.app.service;

import com.santander.extractor.utils.ExtractorAdvice;
import com.santander.mpa.app.dto.InvoicePaymentFileDTO;
import com.santander.mpa.app.mapper.InvoicePaymentFileMapper;
import com.santander.mpa.domain.entity.InvoicePaymentFile;
import lombok.AllArgsConstructor;
import org.jetbrains.annotations.NotNull;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.stereotype.Service;

@Service
@AllArgsConstructor
public class ItemProcessorCustomService
    implements ItemProcessor<InvoicePaymentFileDTO, InvoicePaymentFile> {

  private final InvoicePaymentFileMapper invoicePaymentFileMapper;
  private final ExtractorAdvice extractor;

  @Override
  public InvoicePaymentFile process(@NotNull InvoicePaymentFileDTO invoicePaymentFileDTO)
      throws Exception {
    ExtractorAdvice.put("data.data.mapAttributes.process", "process executed");
    extractor.execute("telemetria_log_category");
    return this.invoicePaymentFileMapper.toEntity(invoicePaymentFileDTO);
  }
}

---

package com.santander.mpa.infra.mapper;

import static org.junit.jupiter.api.Assertions.*;

import com.santander.extractor.utils.ExtractorAdvice;
import com.santander.mpa.app.dto.InvoicePaymentFileDTO;
import com.santander.mpa.app.mapper.InvoicePaymentFileMapper;
import com.santander.mpa.app.mapper.impl.InvoicePaymentFileMapperImpl;
import com.santander.mpa.app.service.ItemProcessorCustomService;
import com.santander.mpa.domain.entity.InvoicePaymentFile;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;

class ItemProcessorCustomServiceTest {

  @Mock
  private ExtractorAdvice extractor;

  @Mock
  private InvoicePaymentFileMapper invoicePaymentFileMapper;

  @Test
  void testProcess() throws Exception {
    InvoicePaymentFileDTO invoicePaymentFileDTO = Mockito.mock(InvoicePaymentFileDTO.class);

    ItemProcessorCustomService itemProcessorCustomService =
        new ItemProcessorCustomService(new InvoicePaymentFileMapperImpl());

    InvoicePaymentFile result = itemProcessorCustomService.process(invoicePaymentFileDTO);

    assertNotNull(result);
  }
}

---


package com.santander.mpa.app.mapper.impl;

import com.santander.mpa.app.dto.InvoicePaymentFileDTO;
import com.santander.mpa.app.mapper.InvoicePaymentFileMapper;
import com.santander.mpa.domain.entity.InvoicePaymentFile;
import org.springframework.stereotype.Service;

@Service
public class InvoicePaymentFileMapperImpl implements InvoicePaymentFileMapper {
  @Override
  public InvoicePaymentFile toEntity(InvoicePaymentFileDTO invoicePaymentFileDTO) {

    InvoicePaymentFile invoicePaymentFile = new InvoicePaymentFile();

    invoicePaymentFile.setTransactionBankCode(invoicePaymentFileDTO.getTransactionBankCode());
    invoicePaymentFile.setRecordType(invoicePaymentFileDTO.getRecordType());
    invoicePaymentFile.setBatchRecordSequentialNumber(
        invoicePaymentFileDTO.getBatchRecordSequentialNumber());
    invoicePaymentFile.setSegmentRecordDetailCode(
        invoicePaymentFileDTO.getSegmentRecordDetailCode());
    invoicePaymentFile.setMovementCode(invoicePaymentFileDTO.getMovementCode());
    invoicePaymentFile.setReturnBatchNumber(invoicePaymentFileDTO.getReturnBatchNumber());
    invoicePaymentFile.setBeneficiaryAgency(invoicePaymentFileDTO.getBeneficiaryAgency());
    invoicePaymentFile.setBeneficiaryAgencyType(invoicePaymentFileDTO.getBeneficiaryAgencyType());
    invoicePaymentFile.setCurrentAccountNumber(invoicePaymentFileDTO.getCurrentAccountNumber());
    invoicePaymentFile.setAccountVerifyngDigit(invoicePaymentFileDTO.getAccountVerifyngDigit());
    invoicePaymentFile.setOurNumber(invoicePaymentFileDTO.getOurNumber());
    invoicePaymentFile.setWalletCode(invoicePaymentFileDTO.getWalletCode());
    invoicePaymentFile.setBillingDocumentNumber(invoicePaymentFileDTO.getBillingDocumentNumber());
    invoicePaymentFile.setDueDate(invoicePaymentFileDTO.getDueDate());
    invoicePaymentFile.setInvoiceNominalValue(
        invoicePaymentFileDTO.getInvoiceNominalValue());
    invoicePaymentFile.setReceivingBankNumber(invoicePaymentFileDTO.getReceivingBankNumber());
    invoicePaymentFile.setReceivingAgency(invoicePaymentFileDTO.getReceivingAgency());
    invoicePaymentFile.setReceivingAgencyDigit(invoicePaymentFileDTO.getReceivingAgencyDigit());
    invoicePaymentFile.setCompanyInvoiceIdentification(
        invoicePaymentFileDTO.getCompanyInvoiceIdentification());
    invoicePaymentFile.setCurrencyCode(invoicePaymentFileDTO.getCurrencyCodeT());
    invoicePaymentFile.setPayerRegisterType(invoicePaymentFileDTO.getPayerRegisterType());
    invoicePaymentFile.setPayerRegisterNumber(
        invoicePaymentFileDTO.getPayerRegisterNumber());
    invoicePaymentFile.setPayerName(invoicePaymentFileDTO.getPayerNameT());
    invoicePaymentFile.setBillingAccount(invoicePaymentFileDTO.getBillingAccount());
    invoicePaymentFile.setFeeValue(invoicePaymentFileDTO.getFeeValue());
    invoicePaymentFile.setServiceBatch(invoicePaymentFileDTO.getServiceBatch());
    invoicePaymentFile.setCharges(invoicePaymentFileDTO.getCharges());
    invoicePaymentFile.setDiscountGrantedValue(
        invoicePaymentFileDTO.getDiscountGrantedValue());
    invoicePaymentFile.setAbatementGrantedValue(
        invoicePaymentFileDTO.getAbatementGrantedValue());
    invoicePaymentFile.setTaxedValue(invoicePaymentFileDTO.getTaxedValue());
    invoicePaymentFile.setPayerPayedValue(invoicePaymentFileDTO.getPayerPayedValue());
    invoicePaymentFile.setSettledValue(invoicePaymentFileDTO.getSettledValue());
    invoicePaymentFile.setOtherCostsValue(invoicePaymentFileDTO.getOtherCostsValue());
    invoicePaymentFile.setOtherCreditsValue(invoicePaymentFileDTO.getOtherCreditsValue());
    invoicePaymentFile.setOccurrenceDate(invoicePaymentFileDTO.getOccurrenceDate());
    invoicePaymentFile.setCreditEffectiveDate(
        invoicePaymentFileDTO.getCreditEffectiveDate());
    invoicePaymentFile.setPayerOccurrenceCode(invoicePaymentFileDTO.getPayerOccurrenceCode());
    invoicePaymentFile.setPayerOccurrenceDate(
        invoicePaymentFileDTO.getPayerOccurrenceDate());
    invoicePaymentFile.setPayerOccurrenceValue(
        invoicePaymentFileDTO.getPayerOccurrenceValue());
    invoicePaymentFile.setPayerOccurrenceAddition(
        invoicePaymentFileDTO.getPayerOccurrenceAddition());
    invoicePaymentFile.setCorrespondingTransactionBankCode(
        invoicePaymentFileDTO.getCorrespondingTransactionBankCode());
    invoicePaymentFile.setBeneficiaryCode(invoicePaymentFileDTO.getBeneficiaryCode());
    invoicePaymentFile.setCodeReturn(invoicePaymentFileDTO.getCodeReturn());

    return invoicePaymentFile;
  }
}


