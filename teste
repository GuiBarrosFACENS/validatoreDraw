    @Test
    void testProcessCallsExtractor() throws Exception {
        InvoicePaymentFileDTO invoicePaymentFileDTO = Mockito.mock(InvoicePaymentFileDTO.class);
        InvoicePaymentFile expectedInvoicePaymentFile = new InvoicePaymentFile();

        Mockito.when(invoicePaymentFileMapper.toEntity(invoicePaymentFileDTO)).thenReturn(expectedInvoicePaymentFile);

        itemProcessorCustomService.process(invoicePaymentFileDTO);

        // Verifica se o extractor foi chamado corretamente
        Mockito.verify(extractor).execute("telemetria_log_category");
    }

    @Test
    void testProcessHandlesException() {
        InvoicePaymentFileDTO invoicePaymentFileDTO = Mockito.mock(InvoicePaymentFileDTO.class);

        // Configurando o mock para lançar uma exceção
        Mockito.when(invoicePaymentFileMapper.toEntity(invoicePaymentFileDTO)).thenThrow(new RuntimeException("Error"));

        // Verifica se a exceção é lançada
        assertThrows(RuntimeException.class, () -> itemProcessorCustomService.process(invoicePaymentFileDTO));
    }

    @Test
    void testProcessWithNullInput() {
        assertThrows(NullPointerException.class, () -> itemProcessorCustomService.process(null));
    }

    @Test
    void testProcessWithValidData() throws Exception {
        InvoicePaymentFileDTO invoicePaymentFileDTO = new InvoicePaymentFileDTO();
        // Preencher com dados válidos, se necessário

        InvoicePaymentFile expectedInvoicePaymentFile = new InvoicePaymentFile();
        Mockito.when(invoicePaymentFileMapper.toEntity(invoicePaymentFileDTO)).thenReturn(expectedInvoicePaymentFile);

        InvoicePaymentFile result = itemProcessorCustomService.process(invoicePaymentFileDTO);

        assertNotNull(result);
        assertEquals(expectedInvoicePaymentFile, result);
    }
