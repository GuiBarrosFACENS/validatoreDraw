package com.santander.mpa.app.service.processors;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.santander.extractor.utils.ExtractorAdvice;
import com.santander.mpa.app.dto.FileDetailsDTO;
import com.santander.mpa.app.dto.InvoiceDetailsDTO;
import com.santander.mpa.app.dto.InvoicePaymentDetailsDTO;
import com.santander.mpa.app.dto.InvoicePaymentFileDTO;
import com.santander.mpa.app.mapper.InvoicePaymentFileMapper;
import com.santander.mpa.domain.entity.InvoicePaymentFile;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class ItemProcessorCustomServiceTest {

  @Mock
  private ExtractorAdvice extractor;

  @Mock
  private InvoicePaymentFileMapper invoicePaymentFileMapper;

  @InjectMocks
  private ItemProcessorCustomService itemProcessorCustomService;

  @BeforeEach
  void setUp() {
    MockitoAnnotations.openMocks(this);
  }

  private InvoicePaymentFileDTO createInvoicePaymentFileDTO() {
    FileDetailsDTO fileDetailsDTO = mock(FileDetailsDTO.class);
    InvoiceDetailsDTO invoiceDetailsDTO = mock(InvoiceDetailsDTO.class);
    InvoicePaymentDetailsDTO invoicePaymentDetailsDTO = mock(InvoicePaymentDetailsDTO.class);

    InvoicePaymentFileDTO invoicePaymentFileDTO = new InvoicePaymentFileDTO();
    invoicePaymentFileDTO.setFileDetailsDTO(fileDetailsDTO);
    invoicePaymentFileDTO.setInvoiceDetailsDTO(invoiceDetailsDTO);
    invoicePaymentFileDTO.setInvoicePaymentDetailsDTO(invoicePaymentDetailsDTO);
    
    return invoicePaymentFileDTO;
  }

  @Test
  void testProcessWithValidInput() {
    InvoicePaymentFileDTO invoicePaymentFileDTO = createInvoicePaymentFileDTO();

    InvoicePaymentFile expectedInvoicePaymentFile = new InvoicePaymentFile();
    when(invoicePaymentFileMapper.toEntity(invoicePaymentFileDTO)).thenReturn(expectedInvoicePaymentFile);

    InvoicePaymentFile result = itemProcessorCustomService.process(invoicePaymentFileDTO);

    verify(extractor).execute("telemetria_log_category");
    verify(invoicePaymentFileMapper).toEntity(invoicePaymentFileDTO);
    assertNotNull(result);
    assertEquals(expectedInvoicePaymentFile, result);
  }

  @Test
  void testProcessThrowsException() {
    InvoicePaymentFileDTO invoicePaymentFileDTO = createInvoicePaymentFileDTO();

    when(invoicePaymentFileMapper.toEntity(invoicePaymentFileDTO)).thenThrow(new RuntimeException("Test exception"));

    RuntimeException exception = assertThrows(RuntimeException.class, () -> {
      itemProcessorCustomService.process(invoicePaymentFileDTO);
    });

    verify(extractor).execute("telemetria_log_category");
    verify(invoicePaymentFileMapper).toEntity(invoicePaymentFileDTO);
    assertEquals("Test exception", exception.getMessage());
  }
}
