package com.santander.mpa.app.service.writers;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.santander.extractor.utils.ExtractorAdvice;
import com.santander.mpa.domain.usecase.CreateFileUseCase;
import com.santander.mpa.infra.InvoiceCnabBatchProperties;
import com.santander.mpa.infra.exception.ErrorWriteFileException;
import java.io.IOException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.item.Chunk;

class FileSegmentsWriterServiceTest {

    @Mock
    private CreateFileUseCase createFileUseCase;

    @Mock
    private ExtractorAdvice extractor;

    @Mock
    private InvoiceCnabBatchProperties invoiceCnabBatchProperties;

    private FileSegmentsWriterService fileSegmentsWriterService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(invoiceCnabBatchProperties.getFileSource()).thenReturn("/path/to/file/source");
        when(invoiceCnabBatchProperties.getSegmentFileName()).thenReturn("segmentFile.txt");
        fileSegmentsWriterService = new FileSegmentsWriterService(invoiceCnabBatchProperties, createFileUseCase, extractor);
    }

    @Test
    void testWriteWithValidInput() throws IOException {
        // Mock input
        Chunk<String> lines = new Chunk<>(List.of("line1", "line2", "line3"));

        // Call the method under test
        fileSegmentsWriterService.write(lines);

        // Validate interactions and assertions
        String expectedOutputPath = "/path/to/file/source/segmentFile.txt";
        String expectedFileLines = String.join("", lines);

        verify(createFileUseCase).createFile(eq(expectedOutputPath), eq(new StringBuilder(expectedFileLines)));
        verify(extractor).execute("telemetria_log_category");
    }

    @Test
    void testWriteThrowsErrorWriteFileException() throws IOException {
        // Mock input
        Chunk<String> lines = new Chunk<>(List.of("line1", "line2", "line3"));

        // Mock behavior to throw IOException
        doThrow(new IOException("Test exception")).when(createFileUseCase).createFile(anyString(), any(StringBuilder.class));

        // Call the method under test and verify exception
        ErrorWriteFileException exception = assertThrows(ErrorWriteFileException.class, () -> {
            fileSegmentsWriterService.write(lines);
        });

        // Validate interactions
        String expectedOutputPath = "/path/to/file/source/segmentFile.txt";
        String expectedFileLines = String.join("", lines);

        verify(createFileUseCase).createFile(eq(expectedOutputPath), eq(new StringBuilder(expectedFileLines)));
        verify(extractor, never()).execute("telemetria_log_category");
        assertEquals("Error creating file at path: (/path/to/file/source/segmentFile.txt).", exception.getMessage());
    }
}
