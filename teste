    @Mock
    private InvoiceCnabBatchProperties invoiceCnabBatchProperties;

    @Mock
    private CreateFileUseCase createFileUseCase;

    @Mock
    private ExtractorAdvice extractor;

    @InjectMocks
    private FileSegmentsWriterService fileSegmentsWriterService;

    private String outputPath;

    @BeforeEach
    void setUp() {
        outputPath = "/path/to/file/source/segmentFile.txt";
        when(invoiceCnabBatchProperties.getFileSource()).thenReturn("/path/to/file/source");
        when(invoiceCnabBatchProperties.getSegmentFileName()).thenReturn("segmentFile.txt");
    }

    @Test
    void testWriteSuccess() throws IOException {
        // Arrange
        Chunk<String> lines = new Chunk<>(Arrays.asList("line1", "line2", "line3"));
        when(createFileUseCase.createFile(eq(outputPath), eq("line1line2line3"))).thenReturn(null);

        // Act
        fileSegmentsWriterService.write(lines);

        // Assert
        verify(createFileUseCase).createFile(eq(outputPath), eq("line1line2line3"));
        verify(extractor).execute("telemetria_log_category");
    }

    @Test
    void testWriteIOException() throws IOException {
        // Arrange
        Chunk<String> lines = new Chunk<>(Arrays.asList("line1", "line2", "line3"));
        doThrow(new IOException("Error")).when(createFileUseCase).createFile(eq(outputPath), eq("line1line2line3"));

        // Act & Assert
        assertThrows(ErrorWriteFileException.class, () -> fileSegmentsWriterService.write(lines));
        verify(createFileUseCase).createFile(eq(outputPath), eq("line1line2line3"));
    }
