package com.santander.mpa.app.service.writers;

import com.santander.extractor.utils.ExtractorAdvice;
import com.santander.mpa.domain.usecase.CreateFileUseCase;
import com.santander.mpa.infra.InvoiceCnabBatchProperties;
import com.santander.mpa.infra.exception.ErrorWriteFileException;
import java.io.IOException;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jetbrains.annotations.NotNull;
import org.springframework.batch.item.Chunk;
import org.springframework.batch.item.ItemWriter;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class FileSegmentsWriterService implements ItemWriter<String> {

  private final String outputPath;

  private final CreateFileUseCase createFileUseCase;

  private final ExtractorAdvice extractor;

  public FileSegmentsWriterService(
          InvoiceCnabBatchProperties invoiceCnabBatchProperties, CreateFileUseCase createFileUseCase, ExtractorAdvice extractor) {
    this.outputPath =
        String.format(
            "%s/%s",
            invoiceCnabBatchProperties.getFileSource(),
            invoiceCnabBatchProperties.getSegmentFileName());
    this.createFileUseCase = createFileUseCase;
    this.extractor = extractor;
  }

  @Override
  public void write(@NotNull Chunk<? extends String> lines) {
    try {
      StringBuilder fileLines = new StringBuilder();
      lines.forEach(fileLines::append);

      this.createFileUseCase.createFile(outputPath, fileLines);

      ExtractorAdvice.put("data.data.mapAttributes.process", "create file cache");
      extractor.execute("telemetria_log_category");
    } catch (IOException e) {
      log.error("Error creating file at path: ({}).", outputPath, e);
      throw new ErrorWriteFileException(outputPath, e);
    }
  }
}
