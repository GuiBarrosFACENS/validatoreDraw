import java.time.LocalDateTime;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.*;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
@EnableScheduling
public class ScheduleConfiguration {

  private static final Logger logger = LoggerFactory.getLogger(ScheduleConfiguration.class);

  private JobLauncher jobLauncher;

  private Job processJob;

  public ScheduleConfiguration(JobLauncher jobLauncher, Job processJob) {
    this.jobLauncher = jobLauncher;
    this.processJob = processJob;
  }

  // TODO arrumar Scheduled se for usar atualmente a cada 3 hrs
  @Scheduled(fixedRate = 10800000)
  public void launchJob() throws Exception {
    LocalDateTime date = LocalDateTime.now();
    logger.info("scheduler starts at " + date);

    JobParametersBuilder jobParametersBuilder = new JobParametersBuilder();
    jobParametersBuilder.addDate("runDate", new Date());

    JobExecution jobExecution = jobLauncher.run(processJob, jobParametersBuilder.toJobParameters());
    logger.info("Batch job ends with status as " + jobExecution.getStatus());
  }
}


---


@Configuration
@ComponentScan(basePackages = {"com.santander.mpa", "com.santander.extractor"})
@EnableConfigurationProperties(CustomPropertiesExtratorConfiguration.class)
public class BatchConfiguration {

  private final String source;
  private final String segmentFileName;
  private final String cnabFileName;

  public BatchConfiguration(InvoiceCnabBatchProperties invoiceCnabBatchProperties) {
    this.source = invoiceCnabBatchProperties.getFileSource();
    this.segmentFileName = invoiceCnabBatchProperties.getSegmentFileName();
    this.cnabFileName = invoiceCnabBatchProperties.getCnabFileName();
  }

  @Bean
  public FlatFileItemReader<InvoicePaymentFileDTO> fileSegmentsItemReader(LineMapper lineMapper) {
    String outputPath = String.format("%s/%s", source, segmentFileName);
    return new FlatFileItemReaderBuilder<InvoicePaymentFileDTO>()
        .resource(new FileSystemResource(outputPath))
        .lineMapper((line, lineNumber) -> lineMapper.convert(line))
        .name("readerFileSegments")
        .build();
  }

  @Bean
  public FlatFileItemReader<String> fileCnabItemReader() {
    return new FlatFileItemReaderBuilder<String>()
        .resource(new ClassPathResource(cnabFileName))
        .lineMapper((line, lineNumber) -> line)
        .name("readerFiler")
        .build();
  }

  @Bean
  public Step mergeInvoiceSegmentsLinesStep(
      JobRepository jobRepository,
      PlatformTransactionManager transactionManager,
      FlatFileItemReader<String> fileCnabItemReader,
      ItemProcessor<String, String> fileSegmentsProcessorService,
      FileSegmentsWriterService fileSegmentsWriterService,
      StepExecutionListener stepExecutionListener,
      ChunkListener chunkListener) {
    StepBuilder stepBuilder = new StepBuilder("mergeInvoiceSegmentsLinesStep", jobRepository);

    return stepBuilder
        .<String, String>chunk(4, transactionManager)
        .reader(fileCnabItemReader)
        .processor(fileSegmentsProcessorService)
        .writer(fileSegmentsWriterService)
        .listener(stepExecutionListener)
        .listener(chunkListener)
        .build();
  }

  @Bean
  public Step sendKafkaStep(
      JobRepository jobRepository,
      PlatformTransactionManager transactionManager,
      FlatFileItemReader<InvoicePaymentFileDTO> fileSegmentsItemReader,
      ItemProcessor<InvoicePaymentFileDTO, InvoicePaymentFile> itemProcessorCustomService,
      KafkaWriterCustomService kafkaWriterCustomService,
      TaskExecutor taskExecutor,
      StepExecutionListener stepExecutionListener,
      ChunkListener chunkListener) {
    StepBuilder stepBuilder = new StepBuilder("sendKafkaStep", jobRepository);

    return stepBuilder
        .<InvoicePaymentFileDTO, InvoicePaymentFile>chunk(5000, transactionManager)
        .reader(fileSegmentsItemReader)
        .processor(itemProcessorCustomService)
        .writer(kafkaWriterCustomService)
        .taskExecutor(taskExecutor)
        .listener(stepExecutionListener)
        .listener(chunkListener)
        .build();
  }

  @Bean
  public Step fileDeletingStep(
      JobRepository jobRepository,
      PlatformTransactionManager transactionManager,
      Tasklet deleteFileTaskletService,
      StepExecutionListener stepExecutionListener) {
    StepBuilder stepBuilder = new StepBuilder("fileDeletingStep", jobRepository);
    return stepBuilder
        .tasklet(deleteFileTaskletService, transactionManager)
        .listener(stepExecutionListener)
        .build();
  }

  @Bean
  public Job processJob(
      JobRepository jobRepository,
      Step mergeInvoiceSegmentsLinesStep,
      Step sendKafkaStep,
      Step fileDeletingStep) {
    return new JobBuilder("processJob", jobRepository)
        .incrementer(new RunIdIncrementer())
        .start(mergeInvoiceSegmentsLinesStep)
        .next(sendKafkaStep)
        .next(fileDeletingStep)
        .build();
  }

  @Bean
  public ObjectMapper objectMapper() {
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);
    objectMapper.registerModule(new JavaTimeModule());
    objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
    return objectMapper;
  }

  @Bean
  public TaskExecutor taskExecutor() {
    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
    executor.setCorePoolSize(5);
    executor.setMaxPoolSize(5);
    executor.setThreadNamePrefix("spring_batch_thread-");
    executor.initialize();
    return executor;
  }

  @Bean
  public StepExecutionListener stepExecutionListener(ExtractorAdvice extractorAdvice) {
    return new LoggerStepListener(extractorAdvice);
  }



---

import org.springframework.batch.test.JobLauncherTestUtils;
import org.springframework.batch.test.context.SpringBatchTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@EmbeddedKafka(
    partitions = 1,
    brokerProperties = {"listeners=PLAINTEXT://localhost:9092", "port=9092"})
@SpringBatchTest
@SpringBootTest
@ContextConfiguration(classes = {BatchConfiguration.class})
@Slf4j
@Disabled("Teste desabilitado devido falta do kafka na pipeline")
class KafkaProviderTest {

  @Autowired private KafkaConsumerProvider consumer;

  @Autowired private JobLauncherTestUtils jobLauncherTestUtils;

  @Test
  void sendTopic() throws Exception {
    Assertions.assertDoesNotThrow(() -> jobLauncherTestUtils.launchJob());
    consumer.getLatch().await(3L, TimeUnit.SECONDS);
    Assertions.assertEquals(0, consumer.getLatch().getCount());
  }
}

--


2024-07-29 09:52:49 INFO  c.s.m.i.m.i.KafkaConsumerProvider - [CONSUMER-CNAB]: received payload='"{\"contractId\":null,\"invoiceInfo\":{\"paymentType\":5,\"externalReference\":\"8191560001412\"},\"paymentDate\":\"2024-05-21\",\"dueDate\":\"2024-05-14\",\"paymentAmount\":{\"amount\":1042.74,\"currency\":\"BRL\",\"numericCurrency\":\"00\"},\"paymentDetails\":{\"minimumPaymentAmountDTO\":{\"amount\":1042.74,\"currency\":\"BRL\",\"numericCurrency\":\"00\"},\"accountHolderName\":\"WITYAE CUBEMSU GHOUAR                   \",\"franchiseChannelCode\":null,\"movementDate\":null,\"movementType\":null,\"recordSize\":null,\"ourNumberVerifyingDigit\":null,\"launchCode\":null,\"documentNumber\":null,\"assignorCode\":null,\"cmc7BankCheck\":null,\"creditUnlockDate\":null,\"paymentChannelCode\":null,\"paymentMethodCode\":null,\"transactionNsu\":null,\"postType\":null,\"numericBarCode\":\"0330090049936981915600001412022697160000104274\",\"flagNumber\":null,\"cardholderName\":null,\"channelCode\":null,\"networkCode\":null,\"correlationId\":null,\"localOperReference\":null,\"documentType\":null}}"'
09:52:49.268[#0-0-C-1] INFO         c.s.m.i.m.i.KafkaConsumerProvider  :  :  : [CONSUMER-CNAB]: received payload='"{\"contractId\":null,\"invoiceInfo\":{\"paymentType\":5,\"externalReference\":\"8241420001203\"},\"paymentDate\":\"2024-05-21\",\"dueDate\":\"2024-06-05\",\"paymentAmount\":{\"amount\":0.0,\"currency\":\"BRL\",\"numericCurrency\":\"00\"},\"paymentDetails\":{\"minimumPaymentAmountDTO\":{\"amount\":0.0,\"currency\":\"BRL\",\"numericCurrency\":\"00\"},\"accountHolderName\":\"AMSDUAH K.A                             \",\"franchiseChannelCode\":null,\"movementDate\":null,\"movementType\":null,\"recordSize\":null,\"ourNumberVerifyingDigit\":null,\"launchCode\":null,\"documentNumber\":null,\"assignorCode\":null,\"cmc7BankCheck\":null,\"creditUnlockDate\":null,\"paymentChannelCode\":null,\"paymentMethodCode\":null,\"transactionNsu\":null,\"postType\":null,\"numericBarCode\":\"0330090049936982414207001203025897380000000000\",\"flagNumber\":null,\"cardholderName\":null,\"channelCode\":null,\"networkCode\":null,\"correlationId\":null,\"localOperReference\":null,\"documentType\":null}}"'
09:52:49.268[duling-1] ERROR         o.s.batch.core.step.AbstractStep  :  :  : Encountered an error executing step sendKafkaStep in job processJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 3 in resource=[file [C:\dev-tools-santander\repositorio\sbr-monetar-invoicecnabbatch\src\test\resources\s3-bucket-test\arquivo-segmento-teste.txt]], input=[0330022300001T 61308480130002571        81915600014122401660000013420140520240000000001042740333084800334401660000013420095  001000057680361991WITYAE CUBEMSU GHOUAR                   01300025710000000000000000000000000                      004928369]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:198)

4-07-29 09:52:49 INFO  c.s.m.i.logger.LoggerChuckListener - After chunk processing: sendKafkaStep
09:52:49.265[thread-4] INFO    c.s.m.infra.logger.LoggerChuckListener  :  :  : After chunk processing: sendKafkaStep
2024-07-29 09:52:49 INFO  c.s.m.i.m.i.KafkaConsumerProvider - [CONSUMER-CNAB]: received payload='"{\"contractId\":null,\"invoiceInfo\":{\"paymentType\":5,\"externalReference\":\"8241420001203\"},\"paymentDate\":\"2024-05-21\",\"dueDate\":\"2024-06-05\",\"paymentAmount\":{\"amount\":0.0,\"currency\":\"BRL\",\"numericCurrency\":\"00\"},\"paymentDetails\":{\"minimumPaymentAmountDTO\":{\"amount\":0.0,\"currency\":\"BRL\",\"numericCurrency\":\"00\"},\"accountHolderName\":\"AMSDUAH K.A                             \",\"franchiseChannelCode\":null,\"movementDate\":null,\"movementType\":null,\"recordSize\":null,\"ourNumberVerifyingDigit\":null,\"launchCode\":null,\"documentNumber\":null,\"assignorCode\":null,\"cmc7BankCheck\":null,\"creditUnlockDate\":null,\"paymentChannelCode\":null,\"paymentMethodCode\":null,\"transactionNsu\":null,\"postType\":null,\"numericBarCode\":\"0330090049936982414207001203025897380000000000\",\"flagNumber\":null,\"cardholderName\":null,\"channelCode\":null,\"networkCode\":null,\"correlationId\":null,\"localOperReference\":null,\"documentType\":null}}"'
2024-07-29 09:52:49 ERROR o.s.batch.core.step.AbstractStep - Encountered an error executing step sendKafkaStep in job processJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 3 in resource=[file [C:\dev-tools-santander\repositorio\sbr-monetar-invoicecnabbatch\src\test\resources\s3-bucket-test\arquivo-segmento-teste.txt]], input=[0330022300001T 61308480130002571        81915600014122401660000013420140520240000000001042740333084800334401660000013420095  001000057680361991WITYAE CUBEMSU GHOUAR                   01300025710000000000000000000000000                      004928369]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:198)

2024-07-29 09:52:49 INFO  c.s.m.i.m.KafkaProvider - Sending message to Kafka: {"contractId":"031710023000002365","invoiceInfo":{"paymentType":5,"externalReference":"yyyyyyyyyyy"},"paymentDate":"2023-07-14","dueDate":"2024-01-30","paymentAmount":{"amount":90.0,"currency":"BRL","numericCurrency":"986"},"paymentDetails":{"minimumPaymentAmountDTO":null,"accountHolderName":"JOSEDASILVA","franchiseChannelCode":2,"movementDate":"2024-31-01","movementType":"C","recordSize":154,"ourNumberVerifyingDigit":"6","launchCode":1,"documentNumber":12345678901,"assignorCode":12345678,"cmc7BankCheck":"123432409786645324568231211239","creditUnlockDate":"2024-31-01","paymentChannelCode":"ABCD","paymentMethodCode":"5","transactionNsu":"HEWRTDFSHFGYIUYHIOHGJKJH","postType":"B","numericBarCode":"5423452547632335643423214213564675689765342","flagNumber":0,"cardholderName":"string","channelCode":0,"networkCode":"string","correlationId":"string","localOperReference":"string","documentType":"CPF"}}
09:52:49.165[    main] INFO     c.s.m.i.messageprovider.KafkaProvider  :  :  : Sending message to Kafka: {"contractId":"031710023000002365","invoiceInfo":{"paymentType":5,"externalReference":"yyyyyyyyyyy"},"paymentDate":"2023-07-14","dueDate":"2024-01-30","paymentAmount":{"amount":90.0,"currency":"BRL","numericCurrency":"986"},"paymentDetails":{"minimumPaymentAmountDTO":null,"accountHolderName":"JOSEDASILVA","franchiseChannelCode":2,"movementDate":"2024-31-01","movementType":"C","recordSize":154,"ourNumberVerifyingDigit":"6","launchCode":1,"documentNumber":12345678901,"assignorCode":12345678,"cmc7BankCheck":"123432409786645324568231211239","creditUnlockDate":"2024-31-01","paymentChannelCode":"ABCD","paymentMethodCode":"5","transactionNsu":"HEWRTDFSHFGYIUYHIOHGJKJH","postType":"B","numericBarCode":"5423452547632335643423214213564675689765342","flagNumber":0,"cardholderName":"string","channelCode":0,"networkCode":"string","correlationId":"string","localOperReference":"string","documentType":"CPF"}}
2024-07-29 09:52:49 ERROR c.s.m.i.m.KafkaProvider - Error sending message to Kafka
org.springframework.kafka.KafkaException: Error sending message to Kafka
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:576)
	at com.santander.mpa.infra.messageprovider.KafkaProvider.send(KafkaProvider.java:38)

2024-07-29 09:52:41 INFO  c.s.m.i.logger.LoggerStepListener - Step has completed with status: FAILED
09:52:41.007[    main] ERROR         o.s.batch.core.step.AbstractStep  :  :  : Encountered an error executing step sendKafkaStep in job processJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 5 in resource=[file [C:\dev-tools-santander\repositorio\sbr-monetar-invoicecnabbatch\src\test\resources\s3-bucket-test\arquivo-segmento-teste.txt]], input=[0330022300001T 61308480130002571        81915600014122401660000013420140520240000000001042740333084800334401660000013420095  001000057680361991WITYAE CUBEMSU GHOUAR                   01300025710000000000000000000000000                      004928369]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:198)

2024-07-29 09:52:41 ERROR o.s.batch.core.step.AbstractStep - Encountered an error executing step sendKafkaStep in job processJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 5 in resource=[file [C:\dev-tools-santander\repositorio\sbr-monetar-invoicecnabbatch\src\test\resources\s3-bucket-test\arquivo-segmento-teste.txt]], input=[0330022300001T 61308480130002571        81915600014122401660000013420140520240000000001042740333084800334401660000013420095  001000057680361991WITYAE CUBEMSU GHOUAR                   01300025710000000000000000000000000                      004928369]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:198)
