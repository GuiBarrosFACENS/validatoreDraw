
    @Mock
    private ExtractorAdvice extractor;

    @Mock
    private InvoicePaymentFileMapper invoicePaymentFileMapper;

    @InjectMocks
    private ItemProcessorCustomService itemProcessorCustomService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testProcessWithValidInput() {
        // Mock dependencies
        FileDetailsDTO fileDetailsDTO = mock(FileDetailsDTO.class);
        InvoiceDetailsDTO invoiceDetailsDTO = mock(InvoiceDetailsDTO.class);
        InvoicePaymentDetailsDTO invoicePaymentDetailsDTO = mock(InvoicePaymentDetailsDTO.class);

        // Create DTO and set dependencies
        InvoicePaymentFileDTO invoicePaymentFileDTO = new InvoicePaymentFileDTO();
        invoicePaymentFileDTO.setFileDetailsDTO(fileDetailsDTO);
        invoicePaymentFileDTO.setInvoiceDetailsDTO(invoiceDetailsDTO);
        invoicePaymentFileDTO.setInvoicePaymentDetailsDTO(invoicePaymentDetailsDTO);

        // Mock the behavior of the mapper
        InvoicePaymentFile expectedInvoicePaymentFile = new InvoicePaymentFile();
        when(invoicePaymentFileMapper.toEntity(invoicePaymentFileDTO)).thenReturn(expectedInvoicePaymentFile);

        // Call the method under test
        InvoicePaymentFile result = itemProcessorCustomService.process(invoicePaymentFileDTO);

        // Validate interactions and assertions
        verify(extractor).execute("telemetria_log_category");
        verify(invoicePaymentFileMapper).toEntity(invoicePaymentFileDTO);
        assertNotNull(result);
        assertEquals(expectedInvoicePaymentFile, result);
    }

    @Test
    void testProcessThrowsException() {
        // Mock dependencies
        FileDetailsDTO fileDetailsDTO = mock(FileDetailsDTO.class);
        InvoiceDetailsDTO invoiceDetailsDTO = mock(InvoiceDetailsDTO.class);
        InvoicePaymentDetailsDTO invoicePaymentDetailsDTO = mock(InvoicePaymentDetailsDTO.class);

        // Create DTO and set dependencies
        InvoicePaymentFileDTO invoicePaymentFileDTO = new InvoicePaymentFileDTO();
        invoicePaymentFileDTO.setFileDetailsDTO(fileDetailsDTO);
        invoicePaymentFileDTO.setInvoiceDetailsDTO(invoiceDetailsDTO);
        invoicePaymentFileDTO.setInvoicePaymentDetailsDTO(invoicePaymentDetailsDTO);

        // Mock the behavior of the mapper to throw an exception
        when(invoicePaymentFileMapper.toEntity(invoicePaymentFileDTO)).thenThrow(new RuntimeException("Test exception"));

        // Call the method under test and verify exception
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            itemProcessorCustomService.process(invoicePaymentFileDTO);
        });

        // Validate interactions
        verify(extractor).execute("telemetria_log_category");
        verify(invoicePaymentFileMapper).toEntity(invoicePaymentFileDTO);
        assertEquals("Test exception", exception.getMessage());
    }
