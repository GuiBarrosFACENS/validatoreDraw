    @Test
    @DisplayName("Should process line correctly")
    void shouldProcessLineCorrectly() {
        // Act
        InvoicePaymentFileDTO result = lineMapper.convert(line);

        // Assert
        assertNotNull(result);
        verify(extractor).execute("telemetria_log_category");
        verifyStatic(PositionalFieldProcessor.class);
        PositionalFieldProcessor.process(result, line);
        verifyStatic(ExtractorAdvice.class);
        ExtractorAdvice.put("data.data.mapAttributes.process", "read file");
    }


--

    @Test
    @DisplayName("Should process line correctly")
    void shouldProcessLineCorrectly() {
        // Act
        InvoicePaymentFileDTO result = lineMapper.convert(line);

        // Assert
        assertNotNull(result);
        verify(extractor).execute("telemetria_log_category");
        verify(positionalFieldProcessor).process(any(InvoicePaymentFileDTO.class), eq(line));
        verify(extractor).put(eq("data.data.mapAttributes.process"), eq("read file"));
    }



import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

import com.santander.extractor.utils.ExtractorAdvice;
import com.santander.mpa.infra.dto.InvoicePaymentFileDTO;
import com.santander.mpa.infra.mapper.LineMapperImpl;
import com.santander.mpa.infra.processor.PositionalFieldProcessor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Disabled;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
